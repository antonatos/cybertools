{
  "id": "playbook--098e753a-8bd0-45ef-a86b-ba285528182b",
  "name": "foobar",
  "type": "playbook",
  "impact": 0,
  "labels": [
    "🔐 SecOps",
    "✅ Live"
  ],
  "created": "2025-10-08T08:15:36.459Z",
  "revoked": false,
  "modified": "2025-10-08T08:15:36.459Z",
  "priority": 0,
  "severity": 0,
  "workflow": {
    "loop--8ee3637e-3d59-48f4-906f-8bef38f9a31a": {
      "name": "Split Users for Processing",
      "type": "loop",
      "on_each_item": "action--f0e208fa-7bd5-46e7-8167-9eb99bded3fa"
    },
    "start--b6a1e9a6-6dd5-4dbb-8a45-403b059e3e79": {
      "name": "Start",
      "type": "start",
      "on_completion": "action--5fce4f97-e796-4b81-bc73-c084fb6200b0"
    },
    "action--32fd0264-6a7f-44b5-ac23-b6723eedd482": {
      "name": "Slack",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "text": "={{ $json.message }}",
          "type": "slack_post_message",
          "channel": "C08Q2H8SRUP"
        }
      ],
      "on_completion": "action--ee550c5c-e2ca-49bd-aa0f-8f2cd033e009"
    },
    "action--5f32e457-ef9f-4041-816f-17ab2f88354c": {
      "name": "Rate Limit Wait",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "type": "wait",
          "waiting_time": 5000
        }
      ],
      "on_completion": "action--69bf27ca-d649-4202-9d04-e6968c7da853"
    },
    "action--5fce4f97-e796-4b81-bc73-c084fb6200b0": {
      "name": "List AWS Users1",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "url": "https://iam.amazonaws.com",
          "type": "http-api",
          "method": "POST",
          "http_version": "HTTP/1.1"
        }
      ],
      "on_completion": "action--9daae0c8-5d06-462b-a300-7887b0c99ae1"
    },
    "action--69bf27ca-d649-4202-9d04-e6968c7da853": {
      "name": "Search GitHub for Exposed Keys",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "url": "__url__",
          "type": "http-api",
          "method": "GET",
          "http_version": "HTTP/1.1"
        }
      ],
      "on_completion": "action--c32a4bfe-3402-4277-9d9c-27b71a80326c",
      "step_variables": {
        "__url__": {
          "type": "string",
          "value": "={{ $json.simpleSearch.searchUrl }}"
        }
      }
    },
    "action--9daae0c8-5d06-462b-a300-7887b0c99ae1": {
      "name": "Extract AWS Usernames",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "code": "// n8n Function node: Extract usernames from AWS ListUsersResponse\n\nconst allInputs = $input.all();\n\n// Find the ListUsersResponse input\nconst listUsersInput = allInputs.find(item => item.json.ListUsersResponse);\n\nif (!listUsersInput) {\n  throw new Error('No ListUsersResponse found in input data');\n}\n\n// Extract users array from the response\nconst users = listUsersInput.json\n  .ListUsersResponse\n  .ListUsersResult\n  .Users || [];\n\n// Extract usernames and return each as a separate item for looping\nconst usernameItems = users.map(user => ({\n  json: { username: user.UserName }\n}));\n\n// Return array of individual username objects\nreturn usernameItems;",
          "type": "javascript_code"
        }
      ],
      "on_completion": "loop--8ee3637e-3d59-48f4-906f-8bef38f9a31a"
    },
    "action--b805b13d-851c-4673-9e94-6ab84bb3a9c7": {
      "name": "Generate Security Report",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "code": "// Generate comprehensive security report - Notification Only (No Automatic Actions)\nconst data = $input.item.json;\n\nconst report = {\n  timestamp: new Date().toISOString(),\n  accessKeyId: data.accessKeyId,\n  userName: data.userName,\n  status: data.isCompromised ? 'COMPROMISED' : 'SAFE',\n  totalRepositories: data.totalMatches,\n  repositories: data.repositories.map(repo => ({\n    name: repo.repository.full_name,\n    url: repo.html_url,\n    path: repo.path,\n    score: repo.score\n  })),\n  actionTaken: data.isCompromised ? 'Security team notified - Manual review required' : 'No action required',\n  riskLevel: data.totalMatches > 5 ? 'HIGH' : data.totalMatches > 0 ? 'MEDIUM' : 'LOW',\n  notificationSent: data.isCompromised ? true : false,\n  requiresManualAction: data.isCompromised ? true : false,\n  recommendedActions: data.isCompromised ? [\n    'Manually disable the compromised access key',\n    'Generate new access keys for affected services',\n    'Remove exposed keys from repositories',\n    'Audit recent API usage for this key'\n  ] : []\n};\n\nreturn [report];",
          "type": "javascript_code"
        }
      ],
      "on_completion": "action--ef318ffd-3675-4e20-84dd-72a30b3c0f54"
    },
    "action--c32a4bfe-3402-4277-9d9c-27b71a80326c": {
      "name": "Aggregate Search Results",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "code": "// Aggregate all search results\nconst allResults = [];\nconst accessKeyId = $input.first().json.accessKeyId;\nconst userName = $input.first().json.userName;\n\nfor (const item of $input.all()) {\n  if (item.json.total_count > 0) {\n    allResults.push(...item.json.items);\n  }\n}\n\n// Remove duplicates based on repository and file path\nconst uniqueResults = allResults.filter((item, index, self) => \n  index === self.findIndex(t => t.repository.full_name === item.repository.full_name && t.path === item.path)\n);\n\nreturn [{\n  accessKeyId,\n  userName,\n  totalMatches: uniqueResults.length,\n  repositories: uniqueResults,\n  isCompromised: uniqueResults.length > 0\n}];",
          "type": "javascript_code"
        }
      ],
      "on_completion": "if-condition--310474ae-752d-43fb-b12c-39ab8b63e295"
    },
    "action--e8a5bfde-d351-4d98-9794-988e30bdd4d9": {
      "name": "Prepare Github Search",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "code": "/**\n * Simplified GitHub Search for AWS Access Keys\n * This script generates optimized search queries for finding exposed AWS access keys on GitHub\n */\n\n/**\n * Generates a GitHub API search URL for a given AWS access key\n * @param {Object} inputData - The input data containing AWS access key information\n * @returns {Object} - Search information including URL and query\n */\nfunction generateGitHubSearchQuery(inputData) {\n  try {\n    // Extract access key information from input\n    let accessKeyId;\n    let userName;\n    \n    // Handle different input formats\n    if (inputData && typeof inputData === 'object') {\n      // Check for n8n workflow format\n      if (inputData.ListAccessKeysResponse && \n          inputData.ListAccessKeysResponse.ListAccessKeysResult && \n          inputData.ListAccessKeysResponse.ListAccessKeysResult.AccessKeyMetadata && \n          Array.isArray(inputData.ListAccessKeysResponse.ListAccessKeysResult.AccessKeyMetadata) && \n          inputData.ListAccessKeysResponse.ListAccessKeysResult.AccessKeyMetadata.length > 0) {\n        \n        accessKeyId = inputData.ListAccessKeysResponse.ListAccessKeysResult.AccessKeyMetadata[0].AccessKeyId;\n        userName = inputData.ListAccessKeysResponse.ListAccessKeysResult.AccessKeyMetadata[0].UserName;\n      } \n      // Direct object format\n      else if (inputData.accessKeyId) {\n        accessKeyId = inputData.accessKeyId;\n        userName = inputData.userName || 'unknown';\n      }\n    }\n    \n    // Validate we have an access key\n    if (!accessKeyId) {\n      console.error('No valid AWS access key ID found in input');\n      return { error: 'No valid AWS access key ID found in input' };\n    }\n    \n    // Create the most effective search query\n    // Based on testing, the exact match with quotes is most reliable\n    const searchQuery = `\"${accessKeyId}\" in:file`;\n    \n    // Generate the GitHub API search URL\n    const searchUrl = `https://api.github.com/search/code?q=${encodeURIComponent(searchQuery)}`;\n    \n    return {\n      accessKeyId,\n      userName,\n      searchQuery,\n      searchUrl,\n      note: 'A single exact match query is typically sufficient for finding exposed AWS keys'\n    };\n  } catch (error) {\n    console.error('Error generating GitHub search query:', error);\n    return { error: `Error generating GitHub search query: ${error.message}` };\n  }\n}\n\n/**\n * For more comprehensive searches, this function generates multiple search patterns\n * This is optional and can be used if the simple search doesn't yield results\n * @param {string} accessKeyId - The AWS access key ID to search for\n * @returns {Array} - Array of search queries and URLs\n */\nfunction generateComprehensiveSearch(accessKeyId) {\n  if (!accessKeyId) {\n    return { error: 'No access key ID provided' };\n  }\n  \n  // Search patterns for access keys (in order of effectiveness)\n  const searchQueries = [\n    `\"${accessKeyId}\" in:file`,           // Exact match (most effective)\n    `${accessKeyId} in:file`,              // Without quotes (catches more results but may have false positives)\n    `AWS_ACCESS_KEY_ID=${accessKeyId} in:file`,  // Environment variable format\n    `aws_access_key_id: ${accessKeyId} in:file`, // YAML/config format\n    `accessKeyId: ${accessKeyId} in:file`        // JavaScript/JSON format\n  ];\n  \n  return searchQueries.map(query => ({\n    searchQuery: query,\n    searchUrl: `https://api.github.com/search/code?q=${encodeURIComponent(query)}`\n  }));\n}\n\n// For n8n integration\nfunction processForN8n() {\n  try {\n    // Get input data\n    const inputData = $input.item.json;\n    \n    // Generate the simplified search (recommended approach)\n    const simpleSearch = generateGitHubSearchQuery(inputData);\n    \n    // For backward compatibility, also generate the comprehensive search\n    // if an access key was successfully extracted\n    let comprehensiveSearch = [];\n    if (simpleSearch.accessKeyId) {\n      comprehensiveSearch = generateComprehensiveSearch(simpleSearch.accessKeyId);\n    }\n    \n    return {\n      simpleSearch,\n      comprehensiveSearch,\n      recommendation: 'The simple search is recommended for most cases. Only use comprehensive search if simple search yields no results.'\n    };\n  } catch (error) {\n    console.error('Error in n8n processing:', error);\n    return { error: `Error in n8n processing: ${error.message}` };\n  }\n}\n\n// For standalone usage\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = {\n    generateGitHubSearchQuery,\n    generateComprehensiveSearch\n  };\n} else {\n  // For n8n execution\n  return processForN8n();\n}",
          "type": "javascript_code"
        }
      ],
      "on_completion": "action--5f32e457-ef9f-4041-816f-17ab2f88354c"
    },
    "action--eced52cb-d038-4aed-8677-41f5f93ef3f3": {
      "name": "Disable Access Keys",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "url": "https://iam.amazonaws.com",
          "type": "http-api",
          "method": "POST",
          "http_version": "HTTP/1.1"
        }
      ]
    },
    "action--ee550c5c-e2ca-49bd-aa0f-8f2cd033e009": {
      "name": "Continue Scanning",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "type": "noop"
        }
      ],
      "on_completion": "loop--8ee3637e-3d59-48f4-906f-8bef38f9a31a"
    },
    "action--ef318ffd-3675-4e20-84dd-72a30b3c0f54": {
      "name": "Format Slack Alert",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "code": "/**\n * GitHub Scanner for Exposed AWS IAM Keys - Data Processor\n * \n * This script processes the results from the AWS IAM Key scanner workflow\n * and formats them for reporting and notification purposes.\n */\n\n// Main entry point - this is what n8n will call\n// Input: items array from n8n workflow\n// Output: Slack Block Kit UI format (blocks array only)\nconst items = $input.all();\n\n// Process the input data\nconst scanResults = items.map(item => item.json);\nconst processedResults = processIAMScanResults(scanResults);\n\n// Format for markdown notification\nconst markdownNotification = formatForMarkdownNotification(processedResults);\n// Return as array of objects for n8n\nreturn [{ message: markdownNotification }];\n\n/**\n * Process scan results and format them for reporting\n * @param {Array} scanResults - Array of scan result objects from the workflow\n * @returns {Array} Array of formatted result objects\n */\nfunction processIAMScanResults(scanResults) {\n  if (!Array.isArray(scanResults) || scanResults.length === 0) {\n    return [{\n      status: 'NO_RESULTS',\n      timestamp: new Date().toISOString(),\n      message: 'No scan results to process'\n    }];\n  }\n\n  // Process each scan result\n  const processedResults = scanResults.map(result => {\n    // Create a deep copy to avoid modifying the original data\n    const processedResult = JSON.parse(JSON.stringify(result));\n    \n    // Ensure we have the required fields\n    if (!processedResult.timestamp) {\n      processedResult.timestamp = new Date().toISOString();\n    }\n    \n    // Calculate risk metrics if not provided\n    if (!processedResult.riskLevel) {\n      processedResult.riskLevel = calculateRiskLevel(processedResult);\n    }\n    \n    // Generate recommended actions if not provided\n    if (!processedResult.recommendedActions || processedResult.recommendedActions.length === 0) {\n      processedResult.recommendedActions = generateRecommendedActions(processedResult);\n    }\n    \n    return processedResult;\n  });\n\n  return processedResults;\n}\n  \n  /**\n   * Calculate risk level based on scan result data\n   * @param {Object} result - Individual scan result\n   * @returns {string} Risk level (HIGH, MEDIUM, LOW)\n   */\n  function calculateRiskLevel(result) {\n    // Default to MEDIUM if we can't determine\n    if (!result || !result.status) {\n      return 'MEDIUM';\n    }\n    \n    // Determine risk level based on status and other factors\n    if (result.status === 'COMPROMISED') {\n      // Public repositories or repositories with many contributors increase risk\n      if (result.repositories && result.repositories.some(repo => {\n        return repo.score >= 0.8; // High score indicates higher risk\n      })) {\n        return 'HIGH';\n      }\n      return 'MEDIUM';\n    } else if (result.status === 'POTENTIAL_EXPOSURE') {\n      return 'MEDIUM';\n    } else {\n      return 'LOW';\n    }\n  }\n  \n  /**\n   * Generate recommended actions based on scan result\n   * @param {Object} result - Individual scan result\n   * @returns {Array} List of recommended actions\n   */\n  function generateRecommendedActions(result) {\n    const commonActions = [\n      'Review the exposure details in the security report',\n      'Rotate affected access keys immediately'\n    ];\n    \n    if (result.status === 'COMPROMISED') {\n      return [\n        ...commonActions,\n        'Disable the compromised access key',\n        'Generate new access keys for affected services',\n        'Remove exposed keys from repositories',\n        'Audit recent API usage for this key'\n      ];\n    } else if (result.status === 'POTENTIAL_EXPOSURE') {\n      return [\n        ...commonActions,\n        'Verify if the exposure is a false positive',\n        'Consider rotating keys as a precaution'\n      ];\n    } else {\n      return [\n        'No immediate action required',\n        'Continue monitoring for potential exposures'\n      ];\n    }\n  }\n  \n  /**\n   * Format scan results for Slack-compatible markdown notification\n   * @param {Array} processedResults - Processed scan results\n   * @returns {string} Slack-compatible markdown formatted notification text\n   */\n  function formatForMarkdownNotification(processedResults) {\n    if (!Array.isArray(processedResults) || processedResults.length === 0) {\n      return `🔒 *AWS IAM Key Scan Completed*\\n\\nNo exposed AWS IAM keys were detected in this scan.`;\n    }\n  \n    // Count compromised keys\n    const compromisedCount = processedResults.filter(r => r.status === 'COMPROMISED').length;\n    \n    if (compromisedCount === 0) {\n      return `🔒 *AWS IAM Key Scan Completed*\\n\\nNo exposed AWS IAM keys were detected in this scan.`;\n    }\n    \n    // Create Slack-compatible notification for compromised keys\n    let markdown = `⚠️ *ALERT: AWS IAM Keys Exposed*\\n\\n*${compromisedCount}* AWS IAM keys have been potentially exposed on GitHub. Immediate action required.\\n\\n`;\n    \n    // Add details for each compromised key\n    processedResults.filter(r => r.status === 'COMPROMISED').forEach((result, index) => {\n      markdown += `*Exposure ${index + 1}*\\n\\n`;\n      \n      // Add repository information in a cleaner format\n      markdown += `*Exposure Details:*\\n`;\n      result.repositories.forEach(repo => {\n        markdown += `• *Repository:* ${repo.name}\\n`;\n        markdown += `• *Path:* \\`${repo.path}\\`\\n`;\n        markdown += `• *Risk Score:* ${repo.score.toFixed(2)}\\n\\n`;\n      });\n      \n      // Add risk level and action taken in a compact format\n      markdown += `*Risk Level:* ${result.riskLevel} | *Action Taken:* ${result.actionTaken || 'None'}\\n\\n`;\n      \n      // Add recommended actions with better formatting\n      markdown += `*Recommended Actions:*\\n`;\n      result.recommendedActions.forEach(action => {\n        markdown += `• ${action}\\n`;\n      });\n      markdown += `\\n`;\n    });\n    \n    return markdown;\n  }\n\n  \n  // Export functions for use in n8n workflow\n  module.exports = {\n    processIAMScanResults,\n    calculateRiskLevel,\n    generateRecommendedActions,\n    formatForMarkdownNotification\n  };",
          "type": "javascript_code"
        }
      ],
      "on_completion": "action--32fd0264-6a7f-44b5-ac23-b6723eedd482"
    },
    "action--f0e208fa-7bd5-46e7-8167-9eb99bded3fa": {
      "name": "Get User Access Keys",
      "type": "action",
      "agent": "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81",
      "commands": [
        {
          "url": "https://iam.amazonaws.com",
          "type": "http-api",
          "method": "POST",
          "http_version": "HTTP/1.1"
        }
      ],
      "on_completion": "if-condition--24800aec-ac8c-448d-ad55-88931eaee629"
    },
    "if-condition--24800aec-ac8c-448d-ad55-88931eaee629": {
      "name": "Filter Active Keys Only",
      "type": "if-condition",
      "on_true": "action--e8a5bfde-d351-4d98-9794-988e30bdd4d9",
      "condition": "={{ $json.ListAccessKeysResponse.ListAccessKeysResult.AccessKeyMetadata[0].Status }} = Active"
    },
    "if-condition--310474ae-752d-43fb-b12c-39ab8b63e295": {
      "name": "Check For Compromised Keys",
      "type": "if-condition",
      "on_true": "action--b805b13d-851c-4673-9e94-6ab84bb3a9c7",
      "condition": "isCompromised = ={{ $json.isCompromised }}"
    }
  },
  "created_by": "identity--112e9923-5c87-4cf2-9685-eda58a162a7a",
  "description": "",
  "spec_version": "cacao-2.0",
  "workflow_start": "start--b6a1e9a6-6dd5-4dbb-8a45-403b059e3e79",
  "agent_definitions": {
    "individual--fec38468-27ce-4f9e-b8f5-0aafd58afd81": {
      "name": "DummyAgent",
      "type": "individual",
      "description": "Dummy Agent to be changed"
    }
  }
}